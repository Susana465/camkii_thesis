---
bibliography: [references.bib]
---

# Introduction to computational modelling
The term "computational modelling" serves as an umbrella term, covering different ways of modelling that are designed to help humans understand real-world phenomena.  For simplicity, this PhD defines computational modelling broadly as "the use of computers to simulate and study complex systems through mathematics, physics, and computer science" (as described by the @NIBIB fact sheet). A computational model incorporates numerous variables representing the system under study, with simulations performed by adjusting these variables —either independently or in combination— and observing the outcomes. This PhD specifically employs computational modelling to explore biological systems, focusing on biochemical modelling of dynamic, complex reaction networks that underpin biological processes. 

Computational modelling offers a powerful means of investigating complex biological systems by simulating molecular interactions and emergent behaviours. These models aim to describe the elements of a system, their states, and their interactions with sufficient precision to replicate real-world dynamics. Biological systems, such as cells, exhibit multiscale processes, where molecular interactions lead to larger-scale cellular behaviours, often occurring across various cellular compartments. To study these systems, appropriate mathematical tools are required to capture dynamic, multiscale processes and provide insights into both normal function and disease.

To study intricate cellular processes, such as signal transduction, metabolic networks, and neuronal plasticity, we require models capable of simulating dynamic, nonlinear interactions at multiple scales. In this chapter, we introduce and discuss the rationale behind selecting various modelling approaches to study CaMKII and NMDAR interactions in the postsynaptic dendrite. These include rule-based modelling, agent-based modelling, stochastic simulation algorithms, and ordinary differential equations. This chapter also discusses the computational tools used to implement these models, including MCell for stochastic spatial simulations, BioNetGen for rule-based modelling, and BioDynaMo for agent-based simulations with dynamic geometry. Together, these tools provide a robust framework for simulating complex molecular interactions and cellular behaviours, enabling the study of dynamic processes that are often difficult to investigate experimentally. 

## Why use computational modelling to study biological systems?

When modelling biological systems, we aim to describe the system's elements, states, and interactions to accurately simulate its behaviour. In the context of this study, we examine postsynaptic neuronal dendrites, where complex biochemical processes span multiple compartments and scales. For example, changes in CaMKII localization within a dendrite may lead to formation of NMDAR/CaMKII complex within the postsynaptic density, or drive larger cellular behaviours, such as actin cytoskeleton remodelling. Mathematical tools used in computer modelling can be helpful for analysing and controlling these multiscale dynamics.

Modelling aims to clarify the current state of knowledge about a system by precisely defining its elements and interactions, which can reveal gaps in understanding. Simulations are validated by comparing their behaviour to experimental data; and inconsistencies can suggest incomplete assumptions or misinterpretations. Models that  survive this initial validation can be used to predict new outcomes and explore scenarios that are challenging to investigate experimentally, offering insights into the workings and principles of biological systems.

Moreover, using computational methods for studying biological mechanisms can offer many advantages, including considerable time and cost-efficient savings. Using computer models allows us to study the specific molecules in question, for example, with the ability of testing minimal requirements of very complex systems by just considering the molecules immediately influencing the phenomenon that is being studied. Of course this comes with the caveat that the whole system dynamics cannot be observed. Nevertheless, useful predictions can come out of these models to combine with wet lab research and a combination of both can be useful for creating predictions about biological phenomena. 

This project looks at biology at the level of protein-protein interactions and dynamics. It takes the view that looking at these dynamics is necessary if we want to understand emergent properties of these interactions. Modelling, simulation, and analysis of simulation outcomes are well positioned for integration into the experimental cycle of cell/molecular biology. Although _in vitro_ and _in vivo_ experiments might still be needed to advance our understanding of biological processes, conducting _in silico_, or computer-simulated experiments can help guide the wet-lab process by narrowing the experimental search space. This in turn can mean a reduction of repeated wet-lab experiments, meaning reduced suffering of non-human animals, in accordance with the “Replacement” R of the 3Rs framework for animal research [@tannenbaum2015Russell]. 

## How do we model biochemical systems networks?

Biological and chemical systems can be described by networks of chemical reactions; in other words, the cascades of interactions between CaMKII and NMDARs with other molecules in postsynaptic neuronal dendrites can be understood as a network of chemical reactions. Computational models of these reaction networks can be used to elucidate network dynamics. Reaction-based models are formalized as sets of reactions that describe the given system in terms of mechanistic interactions between the species of interest. This is, biochemical networks are a set of chemical species that can be converted into each other through chemical reactions. The focus of biochemical network models is usually on the levels of the chemical species and this usually requires explicit mathematical expressions for the velocity at which the reactions proceed (kinetic reaction rates). Once the kinetics have been specified, these systems can be used directly to construct full dynamic simulations of the system behaviour on a computer. Biochemical network models allow us to gather insight by simulating chemical interactions over time; we can observe changes in species levels, visualise stable states within the system, and look for potential direct or indirect causal relationships between the species being studied. Importantly, the modellers can modify any of these parameters to test how such changes impact the model’s results.

Biological systems can be simulated in different ways using different algorithms depending on the assumptions made about the underlying kinetics, as we will see below; and different formalisms are usually applied to describe the dynamics of these biochemical systems. The kinetics of chemical reactions vary based on the timing of molecular interactions, with reactions unfolding over a timescale determined by the microscopic mechanics involved. Molecular collisions occur randomly inside cells, and are influenced by factors like thermal motion and diffusion. This randomness means that the number of molecules of a particular species fluctuates as a random variable. However, when we observe large-scale, or macroscopic, quantities —such as the concentration of a substance over time— the outcomes tend to be consistent and predictable. This predictable trend enables us to develop rate laws, mathematical expressions that describe how the concentration of molecules changes over time. Rate laws are foundational to deterministic modelling, as they assume that, given a specific starting point (initial conditions), the progression of a chemical process is fixed or "predestined." Deterministic models thus allow scientists to predict the time evolution of chemical concentrations with high accuracy, even if the underlying molecular interactions remain random on a microscopic scale. Deterministic models work well where molecular species exists in vast quantities. However, as systems decrease in scale -such as in the confined environment of a cell's cytosol- random fluctuations in molecular populations become significant, making experimental results less reproducible and measurements more variable. Unlike deterministic models, which assume smooth, predictable changes, stochastic models accommodate the random fluctuations in molecule numbers that can significantly impact reaction outcomes in confined environments. Lets briefly examine the reasons why each of these approaches may be employed for distinct purposes:

### Deterministic and stochastic modelling {.unnumbered #sec-odessa}

**Deterministic modelling:**
Deterministic approaches to chemical kinetics are often used to characterize time evolutions of chemical reactions in large systems. A popular representation for these models is to use ordinary differential equations (ODEs) to describe the change in the concentrations of chemical species. Running the same set of parameters using deterministic simulations will produce the same results each time by solving these ODEs. Such descriptions are appropriate when the number of particles involved in the biochemical network is large enough to be able to consider continuous concentrations and when spatial effects are negligible, i.e. well-mixed environment is assumed and space has no effect on reactions. In ODE-based models, each chemical species in the network is represented by an ODE that describes the rate of change of that species along time. Therefore, ODE models of biochemical processes are useful and accurate in the high-concentration limit, but often fail to capture stochastic cellular dynamics accurately because the deterministic continuous formulation assumes spatial homogeneity and continuous molecular concentrations.

These ODE models can be used to simulate the dynamics of the concentrations of the chemical species along time given their initial values. This is achieved by numerical integration of the system of ODE which can be carried out with well-established algorithms (e.g. simple forward Euler method). They are also useful to find, for example, steady states of the system, which are conditions when the concentrations of the chemical species do not change [@maly2009Introduction].

**Stochastic modelling:**
Another representation that is useful in systems biology is stochastic simulations, which use probability distribution functions to estimate when single reaction events happen and therefore track the number of particles of the chemical species. As a general rule, stochastic simulations are preferred where the numbers of particles of a chemical species is small; the ODE approach is required when the number of particles is large because the stochastic approach might be computationally intractable. When the assumption of continuous concentration fails due to small-scale cellular environment with limited reactant populations, ODE representation also fails. It is here when stochastic simulations are useful. 

It is important to stress that one simulation run according to stochastic approaches is only one realization of a probabilistic representation, and thus provides limited amount of information on its own. When running stochastic simulations, it is very important that they are repeated for a sufficient number of times in order to reveal the entire range of behaviour presented by such a system (i.e., to estimate a distribution for each chemical species and its dynamic evolution). 

Ultimately, both SSAs and ODEs offer valuable modelling insights, and the selection of the appropriate method depends on the specific dynamics and the level of detail required for simulating the biochemical network under investigation. 

## Complexity in systems biology {#sec-compexity-systems-biology}
A fundamental concept that underpins this PhD thesis is the notion of complexity, which is embedded in the systems studied here. In fact, the computational modelling work of this project sits within something known as _Complexity Science_. Complexity science is the study of a system's interacting parts and the emergent behaviours that appear when looking at these interactions; examples of application of complexity science can be predator-prey models, epidemiological modelling of pandemics, protein-protein interaction networks, models of neurons, and more. When applied to biology, complexity science often falls under the banner of _Systems Biology_. Systems biology refers to the quantitative analysis of dynamic interactions between multiple components within a biological system, with the goal of understanding the system's behaviour as a whole. Systems biology entails the development and application of systems theory principles to study complex biological systems through an iterative process of mathematical modelling, computational simulation, and biological experimentation. It serves as a tool to increase our understanding of biological systems, to develop more directed experiments, and to allow accurate predictions. 

In systems biology, it is helpful to understand and clarify what complexity means in respect to: 

- **The model: the large number of variables that can determine behaviour.** Some hallmarks of complexity are usually the number of parameters, order of equations and evolution of networks. For example, a protein containing n peptide substrates of kinases can potentially be found in up to $2^n$ distinct phosphorylation states. This feature of protein–protein interactions, which arises because a typical protein involved in cellular regulation contains multiple sites of post-translational modification and multiple binding sites, has been called combinatorial complexity. Combinatorial complexity is a common challenge to our understanding of cellular regulation, as these molecular interactions frequently form intricate networks with feedback loops, redundancies, and non-linear behaviours (see next point) making it difficult to predict how changes in one component affect the system as a whole [@klamt2002Combinatorial; @green2018Network]. This is discussed more in depth in @sec-comb-complexity. 

- **The natural system: the connectivity and non-linearity of relationships.** numerous functionally distinct and often multifunctional components interact selectively and non-linearly, leading to the emergence of complex behaviours. A biological system is not always simply the sum of its parts [@nurse1997Ends]. On the contrary, in biological systems, functions arise from the collective properties of the networks rather than from any individual component.

- **The technology: the limited precision and accuracy measurements.** When modelling biological systems, the inherent complexity of biology is further compounded by additional layers of complexity introduced during the modelling process. or example, when gathering quantitative data, several critical questions arise: which parameters are available for modelling the system? Which ones do we infer? Furthermore, how sensitive is the model to these inferred parameters and their initial values? These challenges make us consider the computational complexity involved, prompting reflection on the resources required to solve a problem using an algorithm, typically focusing on time efficiency (how many steps are needed) and memory space (how much memory is required). 

### Understanding combinatorial complexity {.unnumbered #sec-comb-complexity}
Complexity is a critical aspect of the systems in this project, making it essential to understand our choices in how and why we model them. The molecular systems investigated in this project involve intricate protein-protein interactions. Specifically, we are interested in catalytic interactions that drive post-translational covalent modifications such as enzyme-driven phosphorylation of CaMKII and NMDARs, as well as interactions between these proteins that promote the assembly of heterogeneous molecular complexes. 

These types of interactions are hallmark drivers of combinatorial complexity in cellular systems and biochemical networks. When proteins interact, they create unique states that alter the protein’s function, structure, or binding capabilities. Meaning that each protein can undergo multiple types of modifications or engage in various site binding interactions, which leads to a multitude of distinct protein configurations. Systems of interacting proteins are inherently complex as the interactions between its constituent proteins usually have the potential to create a vast array of distinct chemical species.This number can far exceed the actual count of proteins or protein interactions within the system itself, creating a combinatorial explosion where every modification or binding event adds another layer of potential molecular arrangements. 

Moreover, these distinct molecular species states do not exist in isolation. They are interconnected through an extensive network of reactions, further amplifying the system's complexity. Intricate network of protein–protein interactions is in fact a prominent feature of any signal-transduction system [@gomperts2009Signal; @hunter2000Signaling]. These interactions can occur at multiple levels, including feedback loops, cross-talk between pathways, and spatial-temporal variations. Each reaction acts as a link within a larger network, creating pathways that connect different species. Modelling these networks is therefore particularly complex due to the difficulty in capturing all possible interactions and the uncertainty in the exact nature of these interactions; i.e. not all possible states of a molecular species may be relevant for its functions.

The magnitude of combinatorial complexity can be exemplified well with the CaMKII holoenzyme studied in this PhD. CaMKII is a multi-subunit protein that can exist in a vast number of possible functional states, depending on the modifications and interactions at each subunit. Each of the individual subunits of CaMKII can have multiple possible states, influenced by factors such as phosphorylation, binding to calmodulin, and interactions with other proteins like NMDARs, and more [@nicoll2023Synapticc]. 

To understand and quantify CaMKII's combinatorial explosion, lets consider a (non-exhaustive) example where a CaMKII subunit can be found in the following possible states: inactive or active, unphosphorylated at the T286 site or phosphorylated, calmodulin binding site can be free or bound to calmodulin, and NMDAR binding site can be free or bound to CaMKII. Lets consider each state as a "flag". This is, there is an activation flag which can be in one of **two** states. The T286 phosphorylation site can also have **two** states. The CaM-binding flag can also be in **two** states, either be bound or unbound. Same goes for the NMDAR binding site which has **two** states. This means that in this example there is a total of 16 possible state combinations that a _single subunit_ can exhibit.

Next, we consider the rotational symmetry of the holoenzyme. Due to CaMKII's rotational symmetry [REFERENCE], certain subunit configurations are equivalent because rotating the arrangement of subunits does not result in a distinct new state. Rather than treating each subunit’s state as independent in every possible configuration, rotational symmetry allows us to group identical states that can be reached by rotating the holoenzyme, thereby reducing the total number of unique configurations. To account for this rotational symmetry, we use a combinatorial concept known as necklace numbers, which helps calculate the number of distinct configurations of subunits when rotational symmetry is present. By leveraging necklace numbers, we can more efficiently calculate the number of unique arrangements of CaMKII subunits, as it ensures that rotations of identical configurations are not counted multiple times. This approach allows for a more manageable quantification of the system’s complexity. The formula for necklace numbers is shown in @eq-necklace .

$$
N(n, a) = \frac{1}{n} \sum_{i=1}^{v(n)} \phi(d_i) a^{n/d_i}
$$ {#eq-necklace}

Where \( n \) represents the number of subunits (or beads on a necklace), \( a \) is the number of possible states per subunit, and \( \phi(d_i) \) is Euler’s totient function, which helps account for symmetries by considering the divisors of \( n \). 

Thus, for a CaMKII ring with 6 subunits (a=6) with each one having 16 possible states (a=16), the possible number of state combinations would be: 2,796,976. This number of possible states is only estimated for one of the hexamer rings of a CaMKII dodecamer (which has 2 rings of 6 subunits). This example serves to illustrate how the combinatorial explosion of CaMKII's possible states makes it practically impossible to explicitly enumerate or efficiently evaluate all possible configurations using conventional mass action-based methods which assume interactions occur in a manner proportional to the abundance of molecules involved. In fact, previous studies have suggested that a CaMKII dodecamer could present as many as $10^{20}$ possible states (see appendix S1 in @pharris2019Multistate). Moreover, the fact that the potential states of CaMKII vastly outnumber the actual CaMKII molecules in a dendritic spine [REFERENCE], suggests that not all states occur with the same frequency and therefore not all mathematically calculated states are of equal biological relevance. 

This highlights the challenges of modelling systems that involve combinatorial complexity. The complexity arises from the biological system itself but it translates to practical difficulties when it comes to modelling the system. The complexity impacts both the process of writing the model (for example, modelling all possible states) and the computational demands of running it, particularly in terms of time and resources [RELATE TO DATA HAZARDS discussion?]. When it becomes computationally infeasible to enumerate or simulate all state and network possibilities, the model may become intractable, requiring excessive time and/or resources to compute and analyse. Here, rule based modelling offers a powerful solution: rather than accounting for every possible state, it allows us to focus on the biologically significant states and enables the model to reveal emergent behaviours through rule based interactions.

## Rule based modelling 
The challenges posed by combinatorial complexity motivate the adoption of a rule based modelling (RBM) approach for simulating cell signalling systems. RBM can help with combinatorial complexity by using a set of logical rules to describe how molecules interact with each other. With this type of modelling, the system is modelled by specifying the reactions (or rules) that describe how molecules interact and change. Instead of listing every individual interaction or molecular species explicitly, rules are used to represent how molecules bind, modify, and transform. These rules, which are primarily based on experimental observations, are applied to sets of molecules that can be in different states or configurations, and the overall dynamics of the system emerge from the repeated application of these rules. This method allows for computationally efficient models and can scale to handle large and complex systems like the ones studied in this PhD. 

### BioNetGen: A tool for rule based modelling{.unnumbered}
BioNetGen (Biological Network Generator) is a useful tool for performing RBM of biochemical networks, particularly in the context of signalling systems and protein–protein interactions. BioNetGen uses a language called BNGL (BioNetGen Language) to define molecular species and the rules that govern their interactions. A key feature of BioNetGen is that it allows researchers to describe the interactions between proteins and other molecules in a high-level, abstract form, without the need to manually enumerate every possible molecular species or state. Instead, BNGL allows users to define generalized rules using an RBM approach, specifying how molecular entities can interact -such as binding, phosphorylation, or degradation — along with the conditions under which these interactions occur.

BioNetGen is not the only tool available for using RBM, others such as Kappa or Virtual Cell (and more) also exist [@schaff2016Rulebased; @faeder2009Rulebased; @lopez2013Programming; @boutillier2018Kappa]. Different approaches to RBM are used depending on one's objectives and modelling focus [REFERENCES]. In our approach, we employ BNGL as it provides some key advantages for the research at hand. Firstly, BNGL provides a language that is tailored towards modelling biochemical networks with domain-specific requirements, allowing for the detailed specification of molecules and their binding domains, which is particularly useful for studying protein post-translational modifications, for example autophosphorylation of CaMKII. Moreover, the ability to model site-specific details of protein-protein interactions allows these dynamics to be captured systematically, thereby addressing nomenclature challenges and improving the reusability of the models.

Guided by the "don't care, don't write" principle at the heart of RBM modeling, BNGL allows us to specify only the relevant states for a given reaction. This approach eliminates the need to define every possible state explicitly. This is, the rules determine when an implicitly defined reaction can happen and then, for any given iteration, only the states that matter for the execution of a particular reaction (or rule) are explicitly declared. States that do not matter to a particular rule can be omitted. For instance, lets consider a reaction rule where a CaMKII subunit binds to a CaM molecule (@fig-bngl-rbm-example). 

![CaMKII binding to CaM example of don't care, don't write in BioNetGen RBM. The CaMKII subunit has several possible states, each defined by different flags. The open flag determines whether the subunit is in a closed (0) or open (1) state. The T286 and T306 flags represent the phosphorylation states, where a value of 0 indicates the subunit is unphosphorylated, and "P" indicates phosphorylation. The cam flag refers to a binding site for CaM, which can either be bound or unbound. Similarly, the nmdar flag represents another binding site for the NMDA receptor, which can also be in a bound or unbound state. The cam and nmdar flags represent binding events that can occur or not, depending on whether CaM or NMDA receptors are bound to the subunit. In this case, for the reaction to proceed, CaMKIII needs to be open, unphosphorylayed at T306, and unbound from any calmodulin molecules, for calmodulin to bind. The requirements for CaM to bind to CaMKII are that it is in a state of being bound to four calcium, and its camkii binding site is free. When these conditions are met, and the molecules diffusing meet, regardless of any other states, the reaction will occur. As a result, a molecular complex will form, where CaMKII and CaM are bound through their respective binding sites, represented with a “!1” link notation. The drawings in this figure are abstractions designed to simplify the understanding of the molecular interactions.](30-modelling-figures\camkii_cam_bngl_example.PNG){#fig-bngl-rbm-example width=65%}

In this example, we don't specify the state of T286 or whether CaMKII is bound to NMDARs or not. The reaction rule only specifies the states that are relevant for said reaction (in this case, that the subunit is open, T306 unphosphorylated and cam binding site is free) and the rest is left unspecified. This dramatically reduces the number of reactions that need to be written, which also helps to alleviate potential computational intractability challenges posed by combinatorial complexity [@karp1975Computational; @karp1972Reducibility; @blazewicz2005Selected; @suarez2009Challenges]. 

Additionally, BNGL supports the inclusion of cellular compartments through its compartmental extension (cBNGL), enabling explicit modelling of the compartmental organization of the cell and its effects on system dynamics. This way, we can introduce localization attributes for molecular species, as well as appropriate volumetric scaling of reaction rates. BNGL also has been integrated with MCell via pyBNGL, a Python library. This integration with MCell and Python enables BNGL models to be executed as network-free simulations, further alleviating the combinatorial explosion associated with enumerating an entire network. Through these advances, we can run models that are spatially resolved, allowing for more nuanced and detailed analysis, which we discuss next.

### MCell: A tool for dynamic protein visualisation and modelling{#sec-MCell .unnumbered}

MCell (Monte Carlo Cell) is an agent-based, reaction-diffusion software platform designed to simulate complex biochemical processes with a focus on spatial and stochastic dynamics [@stiles1996Miniaturea; @2000Monte; @kerr2008FAST; @husar2022MCell4]. Agent-based modelling simulates the interactions of autonomous agents -such as molecules- to understand how a system behaves and to capture emergent behaviours; for example, the formation of molecular complexes, signal transduction pathways, or spatial patterning within a cell. MCell is particularly valuable for modelling biological systems where the precise location and movement of molecules are crucial, such as synaptic signalling or interactions at the cellular level. MCell can handle highly detailed 3D geometries, allowing for the simulation of biological environments with realistic spatial constraints. To facilitate the visualisation of these complex geometries, MCell integrates with CellBlender. CellBlender is an addon for Blender, a widely used open-source 3D modelling and animation software [REFERENCES].

![CellBlender, an add-on for Blender, allows users to design, simulate, analyse, and visualise MCell models in an interactive 3D environment. The figure shows a 3D MCell model of a simplified postsynaptic dendritic spine, with blue molecules representing receptors that diffuse across the cell membrane, while other molecules diffuse within the cell. This screenshot is taken from the model created by Roman Garcia, S., and Stefan, M. (2013). ](30-modelling-figures\cellblender.PNG){#fig-cellblender}

MCell software employs stochastic Monte Carlo algorithms, which rely on random sampling to simulate the behaviour of molecules. This stochastic approach makes MCell particularly effective for capturing the inherent randomness found in biological systems, previously discussed in @sec-odessa. MCell can model the diffusion of molecules within cellular compartments and the probabilistic interactions between proteins, making it a powerful tool for studying phenomena where small fluctuations can have significant impacts, such as in the postsynaptic signalling pathways studied in this thesis. MCell is a particle-based simulator that models molecules as point particles within a 3D space. Each time step of an MCell simulation, particles can move, interact with other particles or surfaces, and undergo bimolecular and/or unimolecular reactions. Briefly, MCell operates as follows: as a volume molecule diffuses, all molecules within a given radius along its trajectory, or at the point of collision on a surface, are considered for a reaction. For surface molecules (in membranes), the molecule first diffuses, and then its neighbours are evaluated for reaction [@fig-mcell-works]. MCell allows defining arbitrary geometry, and complex models such as a 180μm3 3DEM reconstruction of hippocampal neuropil have been used to construct a geometrically-precise simulation of 100s of neuronal synapses at once (Keller et al., 2015). A detailed description of mathematical foundations of MCell’s algorithms can be found here [@bartol2000Monte; @kerr2008FAST]

![MCell simplified schematic to understand how particle collision works. At time zero, molecules are released into a 3D space (represented by a blue circle), and they begin to diffuse according to specified diffusion coefficients. Over time, if molecules A and B collide, they are considered for a reaction, in this case, where A and B combine to form molecule C. ](30-modelling-figures\mcell_works.PNG){#fig-mcell-works width=85%}

One of the standout features of MCell [REFERENCE] is its capability for network-free simulation, made possible through integration with NFSim, a specialised network-free simulator [REFERENCE]. As discussed previously in @sec-compexity-systems-biology, enumerating every possible molecular state or reaction network can lead to a combinatorial explosion that can make complex systems intractable. MCell, however, bypasses this limitation by tracking individual molecules and their interactions in real-time, only focusing on the relevant species and states. This not only reduces computational load but also allows researchers to explore more complex and realistic biological scenarios without the constraints of predefined reaction networks.

MCell (version 4) also provides a versatile Python interface. This recently implemented Python interface allows for greater ease in scripting and model construction, making it more user-friendly and adaptable for researchers [REFERENCE]. Additionally, the newly created BioNetGen Library for python (pyBNG) allows direct loading and parsing of a BNG model into MCell. This allows for the creation of models that capture multimeric structures, site-specific binding properties, and the dynamic interactions of proteins over time and space [@@husar2022MCell4]. The main components of MCell4, which enable interaction between various libraries and engines, include: a PyMCell library which offers a Python interface and contains classes to manage the model representation. The MCell4 engine, responsible for executing simulation algorithms, and a pyBNG library, which provides methods for resolving BioNetGen reactions. It also includes a MDL (Model Description Language) parser that ensures backward compatibility with MCell3 (not shown here) [@fig-mcellparsing].

![Figure modified from @husar2022MCell4. The MCell4 (version used in this PhD) components that allow for integration between different libraries and engines. PyMCell Library allows for python interface for model representation. The MCell4 engine implements simulation algorithms through a scheduler that keeps track of events to be run in each iteration. The pyBNG library provides methods to resolve BioNetGen reactions using python scripts.](30-modelling-figures\mcellparsing.PNG){#fig-mcellparsing width=70%}

A model can be defined using BNGL, where molecular interactions are specified through detailed rules and reactions. This model can then be parsed using the pyBNG library, allowing Python scripts to handle the BNGL files and initiate simulations with MCell. Python scripts play a crucial role in this workflow. They are not only responsible for parsing BNGL files but also for defining the cellular geometry and setting parameters required for MCell simulations (see code workflow here - REFERENCE). Once the simulation is executed in MCell, the output is generated in the form of data files, containing time-series data on molecular concentrations and dynamics as dictated by the initial reactions [see @fig-input-output].

#### MCell and BioNetGen integration {.unnumbered}

To illustrate the integration between MCell and BioNetGen using python scripts, see below @fig-bngl-workflow, where a BNGL file defines species, reaction rules, molecule releases and compartments. These elements are then imported into MCell, as shown in @fig-mcell-workflow, through a python script that "calls" the BNGL file to run it through MCell, using the mechanisms described in @fig-mcellparsing. 

::: {#fig-workflow layout-ncol=1}

![An example BNGL model file titled "ABC.bngl" includes initial parameters, defined compartments, and species within those compartments. It also contains a simple reaction rule, where A + B produces C, and the reverse reaction is also possible.](30-modelling-figures\mcell4BNGLworkflow.PNG){#fig-bngl-workflow width=70%}

![The Python file run_model.py imports mcell as a module via the PyMCell library. This script loads the BNGL file shown in (a), where the entire BNGL file is read, the model is initialised and run for 10 iterations. Alternatively, specific parts of the BNGL file, such as reaction rules or compartment and molecule release information, can be loaded. Additionally, BNGL compartments can be replaced with actual 3D geometry.](30-modelling-figures\mcell4BNGLworkflow2.PNG){#fig-mcell-workflow width=70%}

BioNetGen model files (a) can be integrated into MCell through Python scripts (b), facilitated by the inbuilt pyBNG and pyMCell libraries.
:::

Standard BNGL files, such as the one shown in @fig-bngl-workflow, are compatible with tools like BioNetGen itself, which enables rapid validation of a reaction network using BioNetGen’s ODE solver or other analysis tools. This method allows the model to be directly compared with spatial simulation results in MCell4, eliminating the need of creating multiple versions of the same model. This integration of tools not only provides a more accurate depiction of cellular dynamics but also enhances reproducibility, as the Python scripting enables the simulations to be replicated and adjusted easily. While this overview provides a general understanding of the model's inputs and outputs, specific methodological details will be elaborated in the Methods section.

For a simple but more comprehensive model that incorporates detailed compartments and cell geometry, you can access, download and execute the code here [TEST_ABC](https://github.com/Susana465/test_ABC). This repository includes a set of models where spatial features are taken into consideration, and a thorough README is provided with step-by-step instructions that are beyond the scope of this introduction chapter.

#### Birds eye view of model inputs and outputs {.unnumbered}

To provide an overview of the implementation of model files (@fig-workflow) and to clarify the overall process of what goes into a model and what is generated, see a simplified illustration in (@fig-input-output). The inputs to the model are the model files, which are written in the chosen modelling language, such as Python or BioNetGen. These input files include the reaction rules, the definitions of molecular species, and other parameters that define the model. The molecular interactions defined in these models are executed and simulated within a 3D environment, and an output is produced, typically displaying changes in molecular concentrations over time.

In the context of this PhD, this involves constructing a model that defines CaMKII and NMDAR interactions, along with other relevant molecules (detailed in the METHODS section). These interactions are simulated within a postsynaptic dendritic volume, and the resulting data captures the variations in molecular concentrations over time. Capturing the variations in molecular concentrations over time allows for a detailed analysis of the kinetics of these interactions, providing insights into the rates and mechanisms of biochemical reactions at a level of precision that is challenging to achieve experimentally. This information can then reveal how specific molecular dynamics contribute to larger-scale cellular behaviours like LTP for understanding how learning and memory work. Additionally, understanding the chemical properties of the reactions involved, including binding affinities, reaction rates, and diffusion characteristics, can aid in predicting how changes at the molecular level may impact the overall function of the synapse. 

![What goes in and what comes out when modelling? An overview of input and output workflow of models in this project. Input files define the model, which is run to simulate difussion of molecules in a 3D space, to give an output of molecular concetrations across time.](30-modelling-figures\inputoutput.PNG){#fig-input-output}

## Agent based modelling with BioDynaMo for visualising multi-dimensional simulations

With MCell and BioNetGen, we are able to model a CaMKII dodecamer in a 3D environment, but what about the dynamic reshaping of a neuron which happens during LTP discussed in @SECTIONLINK? CaMKII interacts with the actin cytoskeleton, which is responsible for the shape and size of the dendritic spine [@okamoto2007Role].  To study this dynamic reshaping, BioDynaMo (Biology Dynamics Modeller) offers a solution, as it can simulate changes in cell shape, such as dendritic growth (@fig-biodynamoactin).

Similar to MCell, BioDynaMo is an agent-based modelling tool that enables the simulation of 3D biophysical molecular interactions [@breitwieser2021BioDynaMo]. However, unlike MCell, BioDynaMo supports dynamic geometry modelling, allowing geometries to change in size or shape during a simulation. In MCell, geometries are static and predefined at the start of the simulation, and they remain fixed throughout the modelling process. To simulate dynamic changes, such as a geometry growing, shrinking, or morphing over time, we can use BioDynaMo. This way, MCell and BioNetGen allow modelling multmeric protein dynamics with a rule based approach (which BioDynaMo does not offer) and BioDynaMo allows for dynamic geometry modelling. 

![Actin filaments modelled in BioDynaMo showing mushroom-like shaped polymerization on a dendritic spine. Data not published, Trajlinek A., 2022](30-modelling-figures\BioDynaMo-actin.PNG){#fig-biodynamoactin width=50%}

We have seen how BioNetGen and MCell can be integrated and used together via the Python API. But how can we extend this integration to include BioDynaMo? The key lies in SBML integration. BioDynaMo supports the Systems Biology Markup Language (SBML), a widely recognised standard for representing biological models. SBML enables the translation and integration of models written in different formats, allowing them to be executed across a range of software platforms [@hucka2003Systems; @keating2020SBML]. As a well-established standard, SBML is frequently used to describe chemical reaction networks, such as those involved in metabolic processes or cell signalling pathways.

Critically, BioNetGen can export models written in BNGL to the SBML format. This export capability allows for the conversion of rule-based BNGL models into a format that is compatible with SBML-supporting tools like BioDynaMo. Consequently, this interoperability facilitates the integration of BNGL models with BioDynaMo, harnessing BioNetGen’s strengths in rule-based modelling alongside BioDynaMo’s advanced capabilities for dynamic geometry simulations. 

To demonstrate the possibility of using BioDynaMo as a tool to simulate neuronal growth through formation of an actin cytoskeleton inside dendritic spines, I helped with supervision of a project that carried out by Adrian Trajlinek (Reference not published). The model works with actin filaments represented as molecular agents with cylindrical shapes [@fig-biodynamoactin]. These can then be modelled to support tree-like structures that can branch out, sever, polymerize and depolymerize in similar manners to the biological equivalent. Overall, this project provided proof of concept that actin dynamics can be modelled in BioDynaMo, and further research can be developed from here onwards. Tools like MCell+CellBlender, BioDynaMo and RuleBender provide an exciting prospect of modelling how the morphology of dendritic spines changes during synaptic plasticity. Together, they provide tools to build a general-purpose platform for large-scale biological simulations.



